 Online Chat Application

## Description
This application is a simple online chat platform developed in Java, enabling multiple users to communicate through a centralized server. It employs socket programming to facilitate client-server interactions and offers a straightforward text-based interface for user engagement.

## Features
- Supports multiple clients connecting to a central server.
- Allows real-time sending and receiving of messages.
- Provides a simple text-based user interface for input and message display.

## Requirements
- Java Development Kit (JDK) version 8 or higher.
- An Integrated Development Environment (IDE) such as Eclipse or IntelliJ IDEA, or any text editor.

## How to Run the Application

1. Clone or Download the Project
   - Download the project files to your local machine or clone the repository from GitHub.

2. Open the Project in Your IDE
   - Create a new Java project in your chosen IDE.
   - Add the `ChatServer.java` and `ChatClient.java` files to the project.

3. Run the Server
   - Find the `ChatServer.java` file.
   - Right-click on it and select **Run As > Java Application**.
   - The server will initiate and start listening for incoming client connections.

4. Run the Client
   - Open a new instance of your IDE or a new terminal window.
   - Locate the `Client.java` file.
   - Right-click on it and select **Run As > Java Application**.
   - Repeat this step in several windows to simulate multiple clients.

5. Using the Chat Application
   - After the server is running, you can begin typing messages in the client console.
   - Messages sent from one client will be broadcast to all connected clients.

## Implementation Details

### Server (`Server.java`)
- The server listens on a designated port (default: 12367).
- Each connected client is managed in a separate thread via the `ClientHandler` class.
- The server maintains a collection of `PrintWriter` objects for all connected clients, enabling message broadcasting.

### Client (`Client.java`)
- The client connects to the server using the localhost address.
- Users can send messages through the console, which are then forwarded to the server.
- Incoming messages from the server are processed in a separate thread, allowing for simultaneous message sending and receiving.

